- comment: State Diagram
  begin: ^\s*(stateDiagram)
  beginCaptures:
    '1':
      name: keyword.control.mermaid
  patterns:
    - match: \%%.*
      name: comment
    - comment: '}'
      match: \s+(})\s+
      captures:
        '1':
          name: keyword.control.mermaid
    - comment: '--'
      match: \s+(--)\s+
      captures:
        '1':
          name: keyword.control.mermaid
    - comment: '(state)'
      match: ^\s*([\w-]+)$
      name: variable
    - comment: '(state) : (description)'
      match: !regex |-
        ([\w-]+) # state name
        \s+(:) # :
        \s+(\s*[-\w\s]+\b) # description
      captures:
        '1':
          name: variable
        '2':
          name: keyword.control.mermaid
        '3':
          name: string
    - comment: 'state'
      begin: !regex |-
        (state) # state
      beginCaptures:
        '1':
          name: keyword.control.mermaid
      patterns:
        - comment: '"(description)" as (state)'
          match: !regex |-
            \s+("[-\w\s]+\b") # description
            \s+(as) # as
            \s+([\w-]+) # state name
          captures:
            '1':
              name: string
            '2':
              name: keyword.control.mermaid
            '3':
              name: variable
        - comment: '(state name) {'
          match: !regex |-
            \s+([\w-]+) # state name
            \s+({) # {
          captures:
            '1':
              name: variable
            '2':
              name: keyword.control.mermaid
        - comment: '(state name) <<fork|join>>'
          match: !regex |-
            \s+([\w-]+) # state name
            \s+(<<(?:fork|join)>>) # <<fork|join>>
          captures:
            '1':
              name: variable
            '2':
              name: keyword.control.mermaid
      end: '$'
    - comment: '(state) -->'
      begin: !regex |-
        ([\w-]+) # state name
        \s+(-->) # -->
      beginCaptures:
        '1':
          name: variable
        '2':
          name: keyword.control.mermaid
      patterns:
        - comment: '(state) (:)? (transition text)?'
          match: !regex |-
            \s+([\w-]+) # state name
            \s*(:)? # :
            \s*(\s*[-\w\s]+\b)? # transition text
          captures:
            '1':
              name: variable
            '2':
              name: keyword.control.mermaid
            '3':
              name: string
        - comment: '[*] (:)? (transition text)?'
          match: !regex |-
            (\[\*\]) # [*]
            \s*(:)? # :
            \s*(\s*[-\w\s]+\b)? # transition text
          captures:
            '1':
              name: keyword.control.mermaid
            '2':
              name: keyword.control.mermaid
            '3':
              name: string
      end: $
    - comment: '[*] --> (state) (:)? (transition text)?'
      match: !regex |-
        (\[\*\]) # [*]
        \s+(-->) # -->
        \s+([\w-]+) # state name
        \s*(:)? # :
        \s*(\s*[-\w\s]+\b)? # transition text
      captures:
        '1':
          name: keyword.control.mermaid
        '2':
          name: keyword.control.mermaid
        '3':
          name: variable
        '4':
          name: keyword.control.mermaid
        '5':
          name: string
    - comment: 'note left|right of (state name)'
      match: !regex |-
        (note (?:left|right) of) # note left|right of
        \s+([\w-]+) # state name
        \s+(:) # :
        \s*([^\n:]+) # note text
      captures:
        '1':
          name: keyword.control.mermaid
        '2':
          name: variable
        '3':
          name: keyword.control.mermaid
        '4':
          name: string
    - comment: 'note left|right of (state name) (note text) end note'
      begin: !regex |-
        (note (?:left|right) of) # note left|right of
        \s+([\w-]+)(.|\n) # state name
      beginCaptures:
        '1':
          name: keyword.control.mermaid
        '2':
          name: variable
      contentName: string
      end: !regex |-
        (end note)
      endCaptures:
        '1':
          name: keyword.control.mermaid
  end: (^|\G)(?=\s*[`~]{3,}\s*$)
